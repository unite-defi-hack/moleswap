#include "stdlib.fc";
#include "errors.fc";
#include "message.fc";

const UINT32_MAX = 4294967295;

int workchain() asm "0 PUSHINT";

cell calculate_state_init(cell data, cell code) inline {
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_contract_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3)
        .store_int(workchain(), 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

int is_resolvable?(slice addr) inline {
    (int wc, _) = parse_std_addr(addr);
    return wc == workchain();
}

() force_chain(slice addr) impure {
    throw_unless(error::wrong_workchain, is_resolvable?(addr));
}

() destruct_and_pay(slice to_address) impure {
    cell msg = begin_cell()
        .store_msg_flag(msg_flag::bounceable)
        .store_slice(to_address)
        .store_coins(0)
        .store_msgbody_prefix_slice()
        .end_cell();
    send_raw_message(msg, CARRY_REMAINING_BALANCE + SELFDESTRUCT_ON_EMPTY);
}

() validate_secret(int secret, int hashlock) impure inline {
    int calculated_hash = begin_cell()
            .store_uint(secret, 256)
            .hash_keccak256();
        throw_unless(error::wrong_secret, calculated_hash == hashlock);
}