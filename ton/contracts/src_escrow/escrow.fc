#include "../imports/stdlib.fc";
#include "../imports/op_codes.fc";
#include "../imports/message.fc";
#include "../imports/errors.fc";
#include "../imports/utils.fc";
#include "getters.fc";
#include "storage.fc";

#pragma version >=0.4.4;

const exec_fee = 30000000;  ;; 0.03 TON
const min_security_deposit = 100000000;  ;; 0.1 TON


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::create) {
        throw_unless(error::forbidden,
            equal_slice_bits(sender_address, storage::lop_address));

        storage::hashlock = in_msg_body~load_uint(256);
        storage::creation_time = in_msg_body~load_uint(32);
        storage::expiration_time = in_msg_body~load_uint(32);

        storage::execution_start_time = UINT32_MAX; ;; will be set when taker call claim operation
        storage::withdrawal_timelock = in_msg_body~load_uint(32);
        storage::public_withdrawal_timelock = in_msg_body~load_uint(32);
        storage::cancellation_timelock = in_msg_body~load_uint(32);
        storage::public_cancellation_timelock = in_msg_body~load_uint(32);

        slice maker_cs = (in_msg_body~load_ref()).begin_parse();
        storage::maker_addr = maker_cs~load_msg_addr();
        storage::maker_asset_addr = maker_cs~load_msg_addr();
        storage::maker_asset_amount = maker_cs~load_coins();
        storage::receiver_addr = maker_cs~load_uint(256);

        slice taker_cs = (in_msg_body~load_ref()).begin_parse();
        storage::taker_asset_addr = taker_cs~load_uint(256);
        storage::taker_asset_amount = taker_cs~load_uint(128);
        storage::taker_src_addr = empty_slice(); ;; will be set when taker call claim operation

        save_data();
        return ();
    }

    if (op == op::claim) {
        throw_unless(error::not_enough_ton, msg_value > min_security_deposit + exec_fee);
        throw_unless(error::not_expired, now() < storage::expiration_time);

        storage::taker_src_addr = sender_address;
        storage::execution_start_time = now();
        save_data();
        return ();
    }

    if (op == op::withdraw) {
        int secret = in_msg_body~load_uint(256);
        validate_secret(secret, storage::hashlock);

        destruct_and_pay(sender_address);
        return ();
    }

    if (op == op::withdraw_to) {
        int secret = in_msg_body~load_uint(256);
        validate_secret(secret, storage::hashlock);

        slice to_address = in_msg_body~load_msg_addr();
        destruct_and_pay(to_address);
        return ();
    }

    if (op == op::public_withdraw) {
        throw(error::not_implemented);
        ;; return ();
    }

    if (op == op::cancel) {
        throw_unless(error::forbidden,
            equal_slice_bits(sender_address, storage::maker_addr));
        throw_unless(error::not_expired, now() >= storage::expiration_time);

        destruct_and_pay(storage::maker_addr);
        return ();
    }

    if (op == op::public_cancel) {
        throw(error::not_implemented);
        ;; return ();
    }

    if (op == op::rescue_funds) {
        throw(error::not_implemented);
        ;; return ();
    }

    throw(0xffff);
}
