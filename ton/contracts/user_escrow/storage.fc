#include "../imports/stdlib.fc";

global slice storage::factory_addr;
global int storage::maker_addr;
global int storage::maker_asset_addr;
global int storage::maker_asset_amount;
global int storage::taker_asset_addr;
global int storage::taker_asset_amount;
global int storage::receiver_addr;
global int storage::taker_addr;


() load_data() inline {
    slice ds = get_data().begin_parse();
    storage::factory_addr = ds~load_msg_addr();
    storage::maker_addr = ds~load_uint(256);
    storage::maker_asset_addr = ds~load_uint(256);
    storage::maker_asset_amount = ds~load_uint(128);

    cell taker_cell = ds~load_ref();
    slice ds_taker = taker_cell.begin_parse();
    storage::taker_asset_addr = ds_taker~load_uint(256);
    storage::taker_asset_amount = ds_taker~load_uint(128);
    storage::receiver_addr = ds_taker~load_uint(256);
    storage::taker_addr = ds_taker~load_msg_addr();
}

() save_data() impure inline {
    set_data(begin_cell()
        .store_slice(storage::factory_addr)
        .store_uint(storage::maker_addr, 256)
        .store_uint(storage::maker_asset_addr, 256)
        .store_uint(storage::maker_asset_amount, 128)
        .store_ref(
            begin_cell()
                .store_uint(storage::taker_asset_addr, 256)
                .store_uint(storage::taker_asset_amount, 128)
                .store_uint(storage::receiver_addr, 256)
                .store_uint(storage::taker_addr, 256)
                .end_cell()
        )
        .end_cell());
}